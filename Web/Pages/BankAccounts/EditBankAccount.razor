@page "/bankaccounts/{BankAccountId:guid}/edit"
@attribute [Authorize]
@using Commands.Handlers.BankAccount.AddBankAccount
@using Commands.Handlers.BankAccount.EditBankAccount;
@using Queries.BankAccounts
@inject IMediator _mediator
@inject IMapper _mapper
@inject ISnackbar Snackbar
@inject NavigationManager NavManager


<h1 class="my-6">Edit bankaccount</h1>

<EditForm Model="@_bankAccount"
          OnInvalidSubmit="@ShowError"
          OnValidSubmit="@SubmitBankAccount">
    <DataAnnotationsValidator />

    <BankAccountForm BankAccount="@_bankAccount" />

    <MudItem Class="d-flex justify-start" xs="12">
        <MudButton ButtonType="ButtonType.Submit"
                   Class="my-8"
                   Color="Color.Primary"
                   DropShadow="false"
                   Size="Size.Large"
                   Variant="Variant.Filled">
            Save bankaccount
        </MudButton>
    </MudItem>
</EditForm>

@code {

    [Parameter]
    public Guid BankAccountId { get; set; }

    private Models.BankAccountForm _bankAccount = new();

    protected override async Task OnInitializedAsync()
    {
        var query = new GetBankAccountByIdQuery(BankAccountId);
        var bankAccountDetail = await _mediator.Send(query);
        _bankAccount = _mapper.Map<Models.BankAccountForm>(bankAccountDetail);
    }

    private async Task SubmitBankAccount()
    {
        var command = new EditBankAccountCommand(
            Id: BankAccountId,
            Name: _bankAccount.Name,
            AccountNumber: _bankAccount.AccountNumber
            );
        var response = await _mediator.Send(command);
        Snackbar.Clear();
        Snackbar.Add($"Bankaccount {_bankAccount.Name} edited successfully!", Severity.Success);
        NavManager.NavigateTo("/bankaccounts");
    }

    private void ShowError()
    {
        Snackbar.Clear();
        Snackbar.Add("Please correct all errors on the form", Severity.Error);
    }

}