@page "/transactions/new"
@attribute [Authorize]
@using Commands.Handlers.Member.ExtendMembership
@using Commands.Handlers.Transaction.AddCreditTransaction
@using Commands.Handlers.Transaction.AddDebitTransaction
@inject IMediator Mediator
@inject IMapper Mapper
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

<h1 class="my-6">Create transaction</h1>

<EditForm Model="@_newTransaction"
          OnInvalidSubmit="@ShowError"
          OnValidSubmit="@AddTransaction">
    <ObjectGraphDataAnnotationsValidator  />

    <TransactionForm IsNew="true"
                     IsSearchForMembership="false"
                     Transaction="@_newTransaction"
                     @bind-TransactionTypeGroup="@_selectedTransactionTypeGroup" />

    <MudItem Class="d-flex justify-start" xs="12">
        <MudButton ButtonType="ButtonType.Submit"
                   Class="my-8"
                   Color="Color.Primary"
                   DisableElevation="true"
                   Size="Size.Large"
                   Variant="Variant.Filled">
            Add transaction
        </MudButton>
    </MudItem>
</EditForm>

@code {
    private readonly Models.TransactionForm _newTransaction = new();

    private TransactionTypeGroup _selectedTransactionTypeGroup = TransactionTypeGroup.Debit;

    private async Task AddTransaction()
    {
        var memberId = _newTransaction.Counterparty.MemberId;
        var expirationDate = _newTransaction.NewMembershipExpirationDate;
        var newTransactionApplyMembershipCalculation = _newTransaction.ApplyMembershipCalculation;
        switch (_selectedTransactionTypeGroup)
        {
            case TransactionTypeGroup.Credit:
            {
                var command = Mapper.Map<AddCreditTransactionCommand>(_newTransaction);
                await Mediator.Send(command);
                break;
            }
            case TransactionTypeGroup.Debit:
            {
                var command = Mapper.Map<AddDebitTransactionCommand>(_newTransaction);
                await Mediator.Send(command);
                break;
            }
        }
        if (memberId.HasValue && expirationDate.HasValue && newTransactionApplyMembershipCalculation)
        {
            await Mediator.Send(new ExtendMembershipCommand(memberId.Value, expirationDate.Value));
        }
        Snackbar.Clear();
        Snackbar.Add($"Transaction for {_newTransaction.Counterparty.Name} added successfully!", Severity.Success);
        NavManager.NavigateTo("/transactions");
    }

    private void ShowError()
    {
        Snackbar.Clear();
        Snackbar.Add("Please correct all errors on the form", Severity.Error);
    }

   
}