@page "/transactions/{TransactionId:guid}/edit"
@attribute [Authorize]
@using MediatR
@using AutoMapper
@using Commands.Handlers
@using Commands.Handlers.Transaction.EditTransaction
@using Domain
@using Queries.Transactions.Handlers
@using Types
@using AttachmentFile = Commands.Handlers.AttachmentFile
@inject IMediator _mediator
@inject IMapper _mapper
@inject ISnackbar _snackbar
@inject NavigationManager _navManager

<h1 class="my-6">Edit transaction</h1>

<EditForm Model="@Transaction"
          OnInvalidSubmit="@ShowError"
          OnValidSubmit="@SubmitTransaction">
    <DataAnnotationsValidator />

    <TransactionForm IsNew="false"
                     IsSearchForMembership="Transaction.Counterparty.MemberId.HasValue"
                     Transaction="@Transaction"
                     TransactionTypeGroup="_transactionTypeGroup" />

    <MudItem Class="d-flex justify-start" xs="12">
        <MudButton ButtonType="ButtonType.Submit"
                   Class="my-8"
                   Color="Color.Primary"
                   DisableElevation="true"
                   Size="Size.Large"
                   Variant="Variant.Filled">
            Save transaction
        </MudButton>
    </MudItem>
</EditForm>

@code {

    [Parameter]
    public Guid TransactionId { get; set; }

    public Models.TransactionForm Transaction = new();

    private TransactionTypeGroup _transactionTypeGroup;

    protected override async Task OnInitializedAsync()
    {
        var query = new GetTransactionByIdQuery(TransactionId);
        var transactionDetail = await _mediator.Send(query);
        Transaction = _mapper.Map<Models.TransactionForm>(transactionDetail);
        _transactionTypeGroup = TransactionTypes.GetTransactionTypeGroup(Transaction.TransactionTypeAmounts.First().TransactionType);
    }

    

    private async Task SubmitTransaction()
    {
        var command = new EditTransactionCommand(
            Id: TransactionId,
            CounterPartyName: Transaction.Counterparty.Name!,
            MemberId: Transaction.Counterparty.MemberId,
            BankAccountId: Transaction.BankAccountId.GetValueOrDefault(),
            ReceivedDateTime: new DateTimeOffset(Transaction.ReceivedDateTime!.Value),
            Description: Transaction.Description!,
            TransactionTypeAmounts: Transaction.TransactionTypeAmounts
                .Select(x => new TransactionTypeAmount(x.TransactionType, x.Amount))
                .ToList(),
            AttachmentFiles: new List<AttachmentFile>()
            );
        var response = await _mediator.Send(command);
        _snackbar.Clear();
        _snackbar.Add("Transaction edited successfully!", Severity.Success);
        _navManager.NavigateTo("/transactions");
    }

    private void ShowError()
    {
        _snackbar.Clear();
        _snackbar.Add("Please correct all errors on the form", Severity.Error);
    }

}