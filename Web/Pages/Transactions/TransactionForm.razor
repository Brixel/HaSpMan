@using Types
@using MediatR
@using Queries.Members.Handlers.AutocompleteMember
@using Queries.Members.Handlers.GetBankAccountInfos
@using Queries.Members.Handlers.SearchMembers
@using Web.Models
@using Commands.Handlers.BankAccount.AddBankAccount
@using Commands.Handlers.Transaction.GetAttachment
@using LinqKit

@inject IWebHostEnvironment Environment

@inject IDialogService dialogService

@inject IMediator mediator;

@inject IJSRuntime JS;
<MudGrid Spacing="5" Class="mw-9">
<MudItem xs="12">
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h5">Type</MudText>
        </MudCardHeader>
        <MudCardContent>
            @if (IsNew)
            {
                <MudGrid>
                    <MudItem xs="6">
                        <MudRadioGroup @bind-SelectedOption="TransactionTypeGroup">
                            @foreach (var transactionTypeGroup in Enum.GetValues<TransactionTypeGroup>())
                            {
                                <MudRadio Option="transactionTypeGroup">@transactionTypeGroup.GetDescription()</MudRadio>
                            }
                        </MudRadioGroup>

                    </MudItem>
                </MudGrid>
            }
            else
            {
                @TransactionTypeGroup.GetDescription()
            }

        </MudCardContent>

    </MudCard>
</MudItem>
<MudItem xs="12">
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h5">Involved parties</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid Justify="Justify.SpaceBetween">
                <MudItem xs="3">
                    <MudRadioGroup @bind-SelectedOption="IsSearchForMembership">
                        <MudRadio Option="false">Non-members</MudRadio>
                        <MudRadio Option="true">Members</MudRadio>
                    </MudRadioGroup>
                </MudItem>
                <MudItem xs="3">
                    @if (IsSearchForMembership)
                    {
                        <MudAutocomplete @bind-Value="Transaction.Counterparty"
                                         Label="Members"
                                         SearchFunc="SearchForMembers"
                                         T="AutocompleteCounterparty"
                                         ToStringFunc="ac => ac?.Name"
                                         Variant="Variant.Outlined">
                        </MudAutocomplete>
                    }
                    else
                    {
                        <MudAutocomplete @bind-Value="Transaction.Counterparty"
                                         CoerceText="true"
                                         CoerceValue="true"
                                         Converter="@counterPartyConverter"
                                         Label="Non members"
                                         SearchFunc="SearchForNonMembers"
                                         T="AutocompleteCounterparty"
                                         ToStringFunc="ac => ac?.Name"
                                         Variant="Variant.Outlined">
                        </MudAutocomplete>
                    }

                </MudItem>

                <MudItem xs="1">
                    @if (TransactionTypeGroup == TransactionTypeGroup.Debit)
                    {
                        <MudIcon Class="mt-4"
                                 Icon="@Icons.Filled.ArrowForward">
                        </MudIcon>
                    }
                    else if (TransactionTypeGroup == TransactionTypeGroup.Credit)
                    {
                        <MudIcon Class="mt-4"
                                 Icon="@Icons.Filled.ArrowBack">
                        </MudIcon>
                    }
                    else
                    {
                        <MudIcon Class="mt-4"
                                 Icon="@Icons.Filled.Block">
                        </MudIcon>
                    }
                </MudItem>
                <MudItem xs="3">
                    <MudSelect @bind-Value="Transaction.BankAccountId"
                               Label="Select bank account"
                               Variant="Variant.Outlined">
                        @foreach (var item in _bankAccounts)
                        {
                            <MudSelectItem Value="@item?.Id">@item?.Name</MudSelectItem>
                        }
                    </MudSelect>

                </MudItem>
                <MudItem xs="3">
                    @{
                        if (!_bankAccounts.Any())
                        {
                            <MudButton Class="mt-4"
                                       Color="Color.Primary"
                                       @onclick="OpenAddBankAccountDialog"
                                       Variant="Variant.Filled">
                                Add bank account
                            </MudButton>
                        }
                    }
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
</MudItem>
<MudItem xs="12">
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h5">
                Transaction
            </MudText>
        </MudCardHeader>
        <MudCardContent Class="pb-8">
            <MudGrid Justify="Justify.FlexStart">
                <MudItem xs="12">
                    <MudTextField @bind-Text="Transaction.Description"
                                  For="(() => Transaction.Description)"
                                  Label="Description"
                                  T="string" />
                </MudItem>
                <MudItem md="4"
                         sm="6"
                         xs="12">
                    <MudDatePicker AutoClose="true"
                                   @bind-Date="Transaction.ReceivedDateTime"
                                   DateFormat="dd/MM/yyyy"
                                   Editable="true"
                                   Label="Transaction date"
                                   Mask="@(new DateMask("dd/MM/yyyy"))"
                                   MaxDate="DateTime.Now"
                                   @ref="_picker">
                        <PickerActions>
                            <MudButton Class="mr-auto align-self-start"
                                       OnClick="@(() => _picker.Clear())">
                                Clear
                            </MudButton>
                        </PickerActions>
                    </MudDatePicker>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
</MudItem>
<MudItem xs="12">
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h5">Amount</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid Spacing="6">
                @foreach (var transactionType in Transaction.TransactionTypeAmounts)
                {
                    <MudItem xs="5">
                        <MudNumericField @bind-Value="transactionType.Amount"
                                         Label="Bedrag (€)"
                                         Min="0"
                                         T="decimal">
                        </MudNumericField>
                    </MudItem>

                    <MudItem xs="7">
                        <MudSelect @bind-Value="transactionType.TransactionType"
                                   Label="Selecteer transactie type"
                                   Variant="Variant.Outlined">
                            @foreach (var item in _transactionTypes)
                            {
                                <MudSelectItem Value="@item">@item.GetDescription()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                }
            </MudGrid>
            <MudDivider Class="mb-4 mt-6" />
            <MudText>
                Sum of all types: <strong>€@Transaction.TransactionTypeAmounts.Sum(x => x.Amount)</strong>.
                This value should match the total amount of the transaction
            </MudText>
        </MudCardContent>
    </MudCard>

</MudItem>
<MudItem xs="12">
    <MudCard>
        <MudList Clickable="true">
            <MudListSubheader>
                Attachments
            </MudListSubheader>
            @foreach (var attachment in Transaction.TransactionAttachments)
            {
                <MudListItem Icon="@Icons.Outlined.Save"
                             OnClick="(() => Download(attachment.FileName))">
                    @attachment.FileName

                </MudListItem>
            }
        </MudList>
    </MudCard>
    <MudCard>
        <MudCardHeader>
            <MudText Type="Typo.h5">Attachments</MudText>
        </MudCardHeader>
        <MudCardContent>

            <InputFile hidden
                       id="attachmentFilePicker"
                       multiple
                       OnChange="UploadFiles" />

            <MudButton Color="Color.Primary"
                       for="attachmentFilePicker"
                       HtmlTag="label"
                       StartIcon="@Icons.Filled.CloudUpload"
                       Variant="Variant.Filled">
                Upload new attachment(s)
            </MudButton>
        </MudCardContent>
    </MudCard>
</MudItem>
<ValidationSummary></ValidationSummary>
</MudGrid>

@code {

    [Parameter]
    public Models.TransactionForm Transaction { get; set; } = new();

    private bool _isSearchForMembership = false;

    [Parameter]
    public bool IsSearchForMembership
    {
        get => _isSearchForMembership;
        set
        {
            _isSearchForMembership = value;
            Transaction.Counterparty = new AutocompleteCounterparty(string.Empty, null);
        }
    }

    private TransactionTypeGroup _transactionTypeGroup;

    [Parameter]
    public TransactionTypeGroup TransactionTypeGroup
    {
        get => _transactionTypeGroup;
        set
        {
            _transactionTypeGroup = value;
            _transactionTypes = GetScopedTransactionTypes();
        }
    }

    [Parameter]
    public bool IsNew { get; set; }

    private IReadOnlyList<BankAccountInfo> _bankAccounts = new List<BankAccountInfo>();

    private IReadOnlyList<TransactionType> _transactionTypes = new List<TransactionType>();

    protected override async Task OnInitializedAsync()
    {
        await GetAllBankAccounts();
        _transactionTypes = GetScopedTransactionTypes();
    }

    private IReadOnlyList<TransactionType> GetScopedTransactionTypes()
    {
        if (TransactionTypeGroup == TransactionTypeGroup.Debit)
        {
            return new List<TransactionType>
            {
                TransactionType.DebitWorkshopFee,
                TransactionType.DebitDonation,
                TransactionType.DebitMemberFee,
                TransactionType.InternalBank
            }.OrderBy(x => x.GetDescription()).ToList();
        }
        return new List<TransactionType>
        {
            TransactionType.CreditAcquisitionConsumables,
            TransactionType.CreditAcquisitionGoodsAndServices,
            TransactionType.CreditBankCosts,
            TransactionType.CreditFixedCosts,
            TransactionType.InternalBank
        }.OrderBy(x => x.GetDescription()).ToList();
    }


    MudDatePicker _picker = new();

    private async Task<IEnumerable<AutocompleteCounterparty>> SearchForMembers(string searchString)
    {
        var response = await mediator.Send(new AutocompleteCounterpartyQuery(searchString, true));
        return response.Counterparties;
    }

    private async Task<IEnumerable<AutocompleteCounterparty>> SearchForNonMembers(string searchString)
    {
        var response = await mediator.Send(new AutocompleteCounterpartyQuery(searchString, false));

        return response.Counterparties;
    }


    private async Task GetAllBankAccounts()
    {
        _bankAccounts = await mediator.Send(new GetBankAccountInfos());

        if (_bankAccounts.Count == 1 && Transaction.BankAccountId == null)
        {
            Transaction.BankAccountId = _bankAccounts[0].Id;
        }
    }

    private async Task OpenAddBankAccountDialog()
    {
        var dialog = dialogService.Show<AddBankAccountDialog>("Add bank account");
        var result = await dialog.Result;
        if (!result.Cancelled && result.Data is true)
        {
            await GetAllBankAccounts();
        }
    }

    private void TransactionTypeChanged()
    {
        _transactionTypes = GetScopedTransactionTypes();
    }

    Converter<AutocompleteCounterparty> counterPartyConverter = new Converter<AutocompleteCounterparty>
    {
        SetFunc = value => value?.Name,
        GetFunc = text => new AutocompleteCounterparty(text, null)
    };

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        var entries = e.GetMultipleFiles();
        foreach (var file in entries)
        {
            var trustedFileNameForFileStorage = Path.GetRandomFileName();
            var directory = Path.Combine(Environment.ContentRootPath,
                Environment.EnvironmentName, "unsafe_uploads");
            Directory.CreateDirectory(directory);
            var path = Path.Combine(directory, trustedFileNameForFileStorage);

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream().CopyToAsync(fs);
            var transaction = new TransactionAttachment(file.Name, file.ContentType, path);
            Transaction.TransactionAttachments.Add(transaction);
        }
    }

    private async Task Download(string attachmentFileName)
    {
        var attachment = await mediator.Send(new GetAttachmentQuery(Transaction.Id, attachmentFileName));
        var fileStream = new MemoryStream(attachment.Bytes);
        using var streamRef = new DotNetStreamReference(fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", attachment.Name, streamRef); // THIS FEELS SOOOO DIRTY
    }

}