@using Types
@using Queries.Members.Handlers.AutocompleteMember

<div class="d-flex flex-column justify-start align-start mw-13">
    <MudCard class="mb-6 mt-2 pb-3 expand">
        <MudCardHeader>
            <MudText Typo="Typo.h5">Type</MudText>
        </MudCardHeader>
        <MudCardContent>
            @if (IsNew)
            {
                <MudGrid>
                    <MudItem xs="6">
                        <MudRadioGroup SelectedOption="TransactionTypeGroup" SelectedOptionChanged="OnChangeTypeGroup"
                                       T="TransactionTypeGroup">
                            @foreach (var transactionTypeGroup in Enum.GetValues<TransactionTypeGroup>())
                            {
                                <MudRadio Option="transactionTypeGroup">@transactionTypeGroup.GetDescription()</MudRadio>
                            }
                        </MudRadioGroup>
                    </MudItem>
                </MudGrid>
            }
            else
            {
                @TransactionTypeGroup.GetDescription()
            }
        </MudCardContent>
    </MudCard>

    <MudCard class="mb-6 mt-2 pb-3 expand">
        <MudCardHeader>
            <MudText Typo="Typo.h5">Involved parties</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid Class="flex-wrap" Justify="Justify.SpaceBetween" Spacing="2">
                <MudItem xs="2">
                    <MudRadioGroup @bind-SelectedOption="IsSearchForMembership">
                        <MudRadio Option="false">Non-members</MudRadio>
                        <MudRadio Option="true">Members</MudRadio>
                    </MudRadioGroup>
                </MudItem>
                <MudItem xs="3">
                    @if (IsSearchForMembership)
                    {
                        <MudAutocomplete ValueChanged="OnChangeMember" Label="Members" SearchFunc="SearchForMembers"
                                         Value="Transaction.Counterparty" T="AutocompleteCounterparty" ToStringFunc="ac => ac?.Name"
                                         Variant="Variant.Outlined" For="@(() => Transaction.Counterparty)">
                        </MudAutocomplete>
                    }
                    else
                    {
                        <MudAutocomplete @bind-Value="Transaction.Counterparty" CoerceText="true" CoerceValue="true"
                                         Converter="@_counterPartyConverter" Label="Non members" SearchFunc="SearchForNonMembers"
                                         T="AutocompleteCounterparty" ToStringFunc="ac => ac?.Name" Variant="Variant.Outlined"
                                         For="@(() => Transaction.Counterparty)">
                        </MudAutocomplete>
                    }
                </MudItem>

                <MudItem xs="2" sm="1">
                    @{
                        var icon = TransactionTypeGroup switch
                        {
                            TransactionTypeGroup.Debit => Icons.Material.Filled.ArrowForward,
                            TransactionTypeGroup.Credit => Icons.Material.Filled.ArrowBack,
                            _ => Icons.Material.Filled.Block
                        };
                        <MudIcon Class="mt-4" Icon="@icon" />
                    }
                </MudItem>
                <MudItem xs="6" sm="3">
                    <MudSelect @bind-Value="Transaction.BankAccountId" Class="min-w-3" Label="Select bank account"
                               Variant="Variant.Outlined">
                        @foreach (var item in _bankAccounts)
                        {
                            <MudSelectItem Value="@item?.Id">@item?.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="3">
                    @{
                        if (!_bankAccounts.Any())
                        {
                            <MudButton Class="mt-4" Color="Color.Primary" @onclick="OpenAddBankAccountDialog"
                                       Variant="Variant.Filled">
                                Add bank account
                            </MudButton>
                        }
                    }
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>

    <MudCard class="mb-6 mt-2 pb-3 expand">
        <MudCardHeader>
            <MudText Typo="Typo.h5">
                Transaction
            </MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid Justify="Justify.FlexStart">
                <MudItem xs="12">
                    <MudTextField @bind-Text="Transaction.Description" For="() => Transaction.Description"
                                  Label="Description" T="string" />
                </MudItem>
                <MudItem xs="6" sm="3">
                    <MudSelect Value="@Transaction.FinancialYearId" Class="min-w-3" Label="Select financial year"
                               Variant="Variant.Outlined" ValueChanged="value => SetMinReceivedDate(value)" T="Guid?">
                        @foreach (var item in _financialYears)
                        {
                            <MudSelectItem Value="@item?.Id" Disabled="@item!.IsClosed">
                                @if (@item.IsClosed)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Lock" />
                                }
                                @item?.Name
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem md="4" sm="6" xs="12">
                    <MudDatePicker AutoClose="true" @bind-Date="Transaction.ReceivedDateTime" DateFormat="dd/MM/yyyy"
                                   Editable="true" Label="Transaction date" Mask="@(new DateMask("dd/MM/yyyy"))"
                                   MinDate="MinReceivedDateTime" MaxDate="DateTime.Now" For="@(() => Transaction.ReceivedDateTime)" @ref="_picker"
                                   Disabled="@(Transaction.FinancialYearId == null)">
                        <PickerActions>
                            <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">
                                Clear
                            </MudButton>
                        </PickerActions>
                    </MudDatePicker>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
    <MudCard class="mb-6 mt-2 pb-3 expand">
        <MudCardHeader>
            <MudText Typo="Typo.h5">Amount</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid>
                @foreach (var transactionType in Transaction.TransactionTypeAmounts)
                {
                    <MudItem xs="6">
                        <MudNumericField Value="transactionType.Amount"
                                         ValueChanged="value => OnAmountChanged(transactionType, value)" Label="Amount (€)" Min="0"
                                         For="@(() => transactionType.Amount)" T="decimal?">
                        </MudNumericField>
                    </MudItem>

                    <MudItem xs="6">
                        <MudSelect @bind-Value="transactionType.TransactionType" Label="Select transaction type"
                                   Variant="Variant.Outlined" T="TransactionType?" For="@(() => transactionType.TransactionType)">

                            <MudSelectItem T="TransactionType?" Value="@null"></MudSelectItem>
                            @foreach (var item in _transactionTypes)
                            {
                                <MudSelectItem T="TransactionType?" Value="@item">@item.GetDescription()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                }
            </MudGrid>
            <MudDivider Class="my-2"></MudDivider>
            <MudText>
                Sum of all types: <strong>€@Transaction.TransactionTypeAmounts.Sum(x => x.Amount)</strong>.
                This value should match the total amount of the transaction
            </MudText>
            @if (CanExtendMembership && SelectedMember != null)
            {
                <MudCheckBox Color="Color.Secondary" @bind-Checked="Transaction.ApplyMembershipCalculation">
                    Extend
                    membership for @SelectedMember.FirstName: €@SelectedMember.MembershipFee. This gives @AmountOfMonths
                    more month(s) of membership
                </MudCheckBox>

                <MudGrid>
                    <MudDatePicker Label="New expiration month" @bind-Date="Transaction.NewMembershipExpirationDate"
                                   DisableToolbar="true" DateFormat="dd/MM/yyyy" MinDate="DateTime.Today" />
                </MudGrid>
            }

        </MudCardContent>
    </MudCard>
    <MudCard class="mb-6 mt-2 pb-3 expand">
        <MudList Clickable="true">
            <MudListSubheader>
                Attachments
            </MudListSubheader>
            @foreach (var attachment in Transaction.NewTransactionAttachments)
            {
                <MudListItem Icon="@Icons.Material.Outlined.SaveAs" OnClick="() => Download(attachment.FileName)">
                    @attachment.FileName
                </MudListItem>
            }
            @foreach (var attachment in Transaction.TransactionAttachments)
            {
                <MudListItem Icon="@Icons.Material.Outlined.Save" OnClick="() => Download(attachment.FileName)">
                    @attachment.FileName
                </MudListItem>
            }
        </MudList>
    </MudCard>
    <MudCard class="mb-6 mt-2 pb-3 expand">
        <MudCardHeader>
            <MudText Type="Typo.h5">Attachments</MudText>
        </MudCardHeader>
        <MudCardContent>
            <InputFile hidden id="attachmentFilePicker" multiple OnChange="UploadFiles" />
            <MudButton Color="Color.Primary" for="attachmentFilePicker" HtmlTag="label"
                       StartIcon="@Icons.Material.Filled.CloudUpload" Variant="Variant.Filled">
                Upload new attachment(s)
            </MudButton>
            @if (FileErrorMessage != null)
            {
                <p class="pa red-text text-darken-2">@FileErrorMessage</p>
            }
        </MudCardContent>
    </MudCard>
    <ValidationSummary></ValidationSummary>
</div>
