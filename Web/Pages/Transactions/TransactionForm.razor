@using Types
<MudGrid>
    <MudItem xs="6">
        <MudTextField T="string" Label="Counter party" @bind-Value="Transaction.CounterPartyName" For="@(() => Transaction.CounterPartyName)" />
    </MudItem>
    <MudItem xs="6">
        <MudTextField T="Guid?" Label="Member id" @bind-Value="Transaction.MemberId" For="@(() => Transaction.MemberId)" />
    </MudItem>
    <MudItem xs="3">
        <MudNumericField Label="Amount" @bind-Value="Transaction.Amount" For="@(() => Transaction.Amount)" />
    </MudItem>
    <MudItem xs="12">
        <MudTextField T="string" Label="Description" @bind-Value="Transaction.Description" For="@(() => Transaction.Description)" />
    </MudItem>
    <MudItem xs="6">
        <MudTextField T="Guid?" Label="BankAccountId" @bind-value="Transaction.BankAccountId" For="(() => Transaction.BankAccountId)" />
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudDatePicker @ref="_picker" Label="Transaction date" @bind-Date="Transaction.ReceivedDateTime"
                       AutoClose="true" MaxDate="DateTime.Now">
            <PickerActions>
                <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Clear</MudButton>
            </PickerActions>
        </MudDatePicker>
    </MudItem>
    @foreach (var transactionType in Transaction.TransactionTypeAmounts)
    {
        <MudItem xs="6">
            <MudSelect Label="Select transaction type" @bind-Value="transactionType.TransactionType">
                @foreach (var item in Enum.GetValues<TransactionType>())
                {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>
            <MudNumericField T="decimal" Label="Amount" @bind-Value="transactionType.Amount"></MudNumericField>
        </MudItem>
    }
    
</MudGrid>

@code {
    [Parameter]
    public Models.TransactionForm Transaction { get; set; } = new();

    MudDatePicker _picker = new();
}