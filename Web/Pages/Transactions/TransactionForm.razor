@using Types
@using MediatR
@using Queries.Members.Handlers.AutocompleteMember
@using Queries.Members.Handlers.GetBankAccountInfos
@using Queries.Members.Handlers.SearchMembers
@using Web.Models
@using Commands.Handlers.BankAccount
@using Commands.Handlers.Transaction.GetAttachment
@using LinqKit

@inject IWebHostEnvironment Environment

@inject IDialogService dialogService

@inject IMediator mediator;

@inject IJSRuntime JS;

<div class="d-flex flex-column justify-start align-start mw-13">
<MudCard class="mb-6 mt-2 pb-3 expand">
    <MudCardHeader>
        <MudText Typo="Typo.h5">Type</MudText>
    </MudCardHeader>
    <MudCardContent>
        @if (IsNew)
        {
            <MudGrid>
                <MudItem xs="6">
                    <MudRadioGroup @bind-SelectedOption="TransactionTypeGroup">
                        @foreach (var transactionTypeGroup in Enum.GetValues<TransactionTypeGroup>())
                        {
                            <MudRadio Option="transactionTypeGroup">@transactionTypeGroup.GetDescription()</MudRadio>
                        }
                    </MudRadioGroup>

                </MudItem>
            </MudGrid>
        }
        else
        {
            @TransactionTypeGroup.GetDescription()
        }
    </MudCardContent>
</MudCard>

<MudCard class="mb-6 mt-2 pb-3 expand">
    <MudCardHeader>
        <MudText Typo="Typo.h5">Involved parties</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid Class="flex-wrap"
                 Justify="Justify.SpaceBetween"
                 Spacing="2">
            <MudItem xs="2">
                <MudRadioGroup @bind-SelectedOption="IsSearchForMembership">
                    <MudRadio Option="false">Non-members</MudRadio>
                    <MudRadio Option="true">Members</MudRadio>
                </MudRadioGroup>
            </MudItem>
            <MudItem xs="3">
                @if (IsSearchForMembership)
                {
                    <MudAutocomplete @bind-Value="Transaction.Counterparty"
                                     Label="Members"
                                     SearchFunc="SearchForMembers"
                                     T="AutocompleteCounterparty"
                                     ToStringFunc="ac => ac?.Name"
                                     Variant="Variant.Outlined">
                    </MudAutocomplete>
                }
                else
                {
                    <MudAutocomplete @bind-Value="Transaction.Counterparty"
                                     CoerceText="true"
                                     CoerceValue="true"
                                     Converter="@counterPartyConverter"
                                     Label="Non members"
                                     SearchFunc="SearchForNonMembers"
                                     T="AutocompleteCounterparty"
                                     ToStringFunc="ac => ac?.Name"
                                     Variant="Variant.Outlined">
                    </MudAutocomplete>
                }
            </MudItem>

            <MudItem xs="2" sm="1">
                @{
                    var icon = TransactionTypeGroup switch {
                        TransactionTypeGroup.Debit => Icons.Filled.ArrowForward,
                        TransactionTypeGroup.Credit => Icons.Filled.ArrowBack,
                        _ => Icons.Filled.Block
                    };
                    <MudIcon Class="mt-4" Icon="@icon" />
                }
            </MudItem>
            <MudItem xs="6" sm="3">
                <MudSelect @bind-Value="Transaction.BankAccountId" Class="min-w-3"
                           Label="Select bank account"
                           Variant="Variant.Outlined">
                    @foreach (var item in _bankAccounts)
                    {
                        <MudSelectItem Value="@item?.Id">@item?.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="3">
                @{
                    if (!_bankAccounts.Any())
                    {
                        <MudButton Class="mt-4"
                                   Color="Color.Primary"
                                   @onclick="OpenAddBankAccountDialog"
                                   Variant="Variant.Filled">
                            Add bank account
                        </MudButton>
                    }
                }
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

<MudCard class="mb-6 mt-2 pb-3 expand">
    <MudCardHeader>
        <MudText Typo="Typo.h5">
            Transaction
        </MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid Justify="Justify.FlexStart">
            <MudItem xs="12">
                <MudTextField @bind-Text="Transaction.Description"
                              For="(() => Transaction.Description)"
                              Label="Description"
                              T="string" />
            </MudItem>
            <MudItem md="4"
                     sm="6"
                     xs="12">
                <MudDatePicker AutoClose="true"
                               @bind-Date="Transaction.ReceivedDateTime"
                               DateFormat="dd/MM/yyyy"
                               Editable="true"
                               Label="Transaction date"
                               Mask="@(new DateMask("dd/MM/yyyy"))"
                               MaxDate="DateTime.Now"
                               @ref="_picker">
                    <PickerActions>
                        <MudButton Class="mr-auto align-self-start"
                                   OnClick="@(() => _picker.Clear())">
                            Clear
                        </MudButton>
                    </PickerActions>
                </MudDatePicker>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>
<MudCard class="mb-6 mt-2 pb-3 expand">
    <MudCardHeader>
        <MudText Typo="Typo.h5">Amount</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid>
            @foreach (var transactionType in Transaction.TransactionTypeAmounts)
            {
                <MudItem xs="6">
                    <MudNumericField @bind-Value="transactionType.Amount"
                                     Label="Amount (€)"
                                     Min="0"
                                     T="decimal">
                    </MudNumericField>
                </MudItem>

                <MudItem xs="6">
                    <MudSelect @bind-Value="transactionType.TransactionType"
                               Label="Select transaction type"
                               Variant="Variant.Outlined">
                        @foreach (var item in _transactionTypes)
                        {
                            <MudSelectItem Value="@item">@item.GetDescription()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            }
        </MudGrid>
        <MudDivider Class="my-2"></MudDivider>
        <MudText>
            Sum of all types: <strong>€@Transaction.TransactionTypeAmounts.Sum(x => x.Amount)</strong>.
            This value should match the total amount of the transaction
        </MudText>
    </MudCardContent>
</MudCard>
<MudCard class="mb-6 mt-2 pb-3 expand">
    <MudList Clickable="true">
        <MudListSubheader>
            Attachments
        </MudListSubheader>
        @foreach (var attachment in Transaction.TransactionAttachments)
        {
            <MudListItem Icon="@Icons.Outlined.Save"
                         OnClick="(() => Download(attachment.FileName))">
                @attachment.FileName

            </MudListItem>
        }
    </MudList>
</MudCard>
<MudCard class="mb-6 mt-2 pb-3 expand">
    <MudCardHeader>
        <MudText Type="Typo.h5">Attachments</MudText>
    </MudCardHeader>
    <MudCardContent>
        <InputFile hidden
                   id="attachmentFilePicker"
                   multiple
                   OnChange="UploadFiles" />
        <MudButton Color="Color.Primary"
                   for="attachmentFilePicker"
                   HtmlTag="label"
                   StartIcon="@Icons.Filled.CloudUpload"
                   Variant="Variant.Filled">
            Upload new attachment(s)
        </MudButton>
        @if (FileErrorMessage != null)
        {   
            <p class="errormessage">@FileErrorMessage</p>
        }
    </MudCardContent>
</MudCard>
<ValidationSummary></ValidationSummary>
</div>

@code {

    [Parameter]
    public Models.TransactionForm Transaction { get; set; } = new();

    private bool _isSearchForMembership = false;

    [Parameter]
    public bool IsSearchForMembership
    {
        get => _isSearchForMembership;
        set
        {
            _isSearchForMembership = value;
            Transaction.Counterparty = new AutocompleteCounterparty(string.Empty, null);
        }
    }

    private TransactionTypeGroup _transactionTypeGroup;

    [Parameter]
    public TransactionTypeGroup TransactionTypeGroup
    {
        get => _transactionTypeGroup;
        set
        {
            _transactionTypeGroup = value;
            _transactionTypes = GetScopedTransactionTypes();
        }
    }

    [Parameter]
    public bool IsNew { get; set; }

    public string? FileErrorMessage { get; set; }

    private IReadOnlyList<BankAccountInfo> _bankAccounts = new List<BankAccountInfo>();

    private IReadOnlyList<TransactionType> _transactionTypes = new List<TransactionType>();

    protected override async Task OnInitializedAsync()
    {
        await GetAllBankAccounts();
        _transactionTypes = GetScopedTransactionTypes();
    }

    private IReadOnlyList<TransactionType> GetScopedTransactionTypes()
    {
        if (TransactionTypeGroup == TransactionTypeGroup.Debit)
        {
            return new List<TransactionType>
            {
                TransactionType.DebitWorkshopFee,
                TransactionType.DebitDonation,
                TransactionType.DebitMemberFee,
                TransactionType.InternalBank,
                TransactionType.DebitSaleConsumables,
                TransactionType.DebitSaleGoodsAndServices
            }.OrderBy(x => x.GetDescription()).ToList();
        }
        return new List<TransactionType>
        {
            TransactionType.CreditAcquisitionConsumables,
            TransactionType.CreditAcquisitionGoodsAndServices,
            TransactionType.CreditBankCosts,
            TransactionType.CreditFixedCosts,
            TransactionType.InternalBank
        }.OrderBy(x => x.GetDescription()).ToList();
    }

    MudDatePicker _picker = new();
    private int _maxAllowedSize = 1024 * 1024 * 10;
    private IReadOnlyList<string> _allowedFileTypes = new List<string> { "pdf", "doc", "docx", "jpg", "jpeg", "png", "gif" };

    private async Task<IEnumerable<AutocompleteCounterparty>> SearchForMembers(string searchString)
    {
        var response = await mediator.Send(new AutocompleteCounterpartyQuery(searchString, true));
        return response.Counterparties;
    }

    private async Task<IEnumerable<AutocompleteCounterparty>> SearchForNonMembers(string searchString)
    {
        var response = await mediator.Send(new AutocompleteCounterpartyQuery(searchString, false));

        return response.Counterparties;
    }

    private async Task GetAllBankAccounts()
    {
        _bankAccounts = await mediator.Send(new GetBankAccountInfos());

        if (_bankAccounts.Count == 1 && Transaction.BankAccountId == null)
        {
            Transaction.BankAccountId = _bankAccounts[0].Id;
        }
    }

    private async Task OpenAddBankAccountDialog()
    {
        var dialog = dialogService.Show<AddBankAccountDialog>("Add bank account");
        var result = await dialog.Result;
        if (!result.Cancelled && result.Data is true)
        {
            await GetAllBankAccounts();
        }
    }

    private void TransactionTypeChanged()
    {
        _transactionTypes = GetScopedTransactionTypes();
    }

    Converter<AutocompleteCounterparty> counterPartyConverter = new Converter<AutocompleteCounterparty>
    {
        SetFunc = value => value?.Name,
        GetFunc = text => new AutocompleteCounterparty(text, null)
    };

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        FileErrorMessage = string.Empty;
        var entries = e.GetMultipleFiles();
        var notAllowedFileTypes = entries.Any(x => !_allowedFileTypes.Any(fileType => x.Name.EndsWith(fileType)));
        if (notAllowedFileTypes)
        {
            var joinedFileTypes = string.Join(", ", _allowedFileTypes);
            FileErrorMessage = $"Some of the files are not of the supported file types ({joinedFileTypes})";
            return;
        }
        var overMaxFileSize = entries.Any(x => x.Size > _maxAllowedSize);
        if (overMaxFileSize)
        {
            FileErrorMessage = "Some of the files are too large (max 10mb)";
            return;
        }
        var existingFileNames = Transaction.TransactionAttachments.Select(x => x.FileName).ToList();
        var duplicateEntries = entries.Where(x => existingFileNames.All(fileName => fileName != x.Name));

        foreach (var file in duplicateEntries)
        {
            var trustedFileNameForFileStorage = Path.GetRandomFileName();
            var directory = Path.Combine(Environment.ContentRootPath,
                Environment.EnvironmentName, "unsafe_uploads");
            Directory.CreateDirectory(directory);
            var path = Path.Combine(directory, trustedFileNameForFileStorage);

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(maxAllowedSize: _maxAllowedSize).CopyToAsync(fs);
            var transaction = new TransactionAttachment(file.Name, file.ContentType, path);
            Transaction.TransactionAttachments.Add(transaction);
        }
    }

    private async Task Download(string attachmentFileName)
    {
        var attachment = await mediator.Send(new GetAttachmentQuery(Transaction.Id, attachmentFileName));
        var fileStream = new MemoryStream(attachment.Bytes);
        using var streamRef = new DotNetStreamReference(fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", attachment.Name, streamRef); // THIS FEELS SOOOO DIRTY
    }

}