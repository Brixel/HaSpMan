@using Types
@using MediatR
@using Queries.Members.Handlers.AutocompleteMember
@using Queries.Members.Handlers.GetBankAccountInfos
@using Queries.Members.Handlers.SearchMembers
@using Web.Models
@using Commands.Handlers.BankAccount
@using Commands.Handlers.Transaction.GetAttachment
@using LinqKit

@inject IWebHostEnvironment Environment

@inject IDialogService dialogService

@inject IMediator mediator;

@inject IJSRuntime JS;
<MudGrid>
    <MudItem xs="12">

        <MudCard>
            <MudCardHeader>
                <MudText Typo="Typo.h5">Type</MudText>
            </MudCardHeader>
            <MudCardContent>
                @if (IsNew)
                {
                    <MudGrid>
                        <MudItem xs="6">
                            <MudRadioGroup @bind-SelectedOption="TransactionTypeGroup">
                                @foreach (var transactionTypeGroup in Enum.GetValues<TransactionTypeGroup>())
                                    {
                                    <MudRadio Option="transactionTypeGroup">@transactionTypeGroup.GetDescription()</MudRadio>

                                    }
                            </MudRadioGroup>

                        </MudItem>
                    </MudGrid>
                }
                else
                {
                    @TransactionTypeGroup.GetDescription()
                }

            </MudCardContent>

        </MudCard>
    </MudItem>
    <MudItem xs="12">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h5">Involved parties</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid Justify="Justify.SpaceBetween" Spacing="2">
                        <MudItem xs="2">
                            <MudRadioGroup 
                                @bind-SelectedOption="IsSearchForMembership" >
                                <MudRadio Option="false">Non-members</MudRadio>
                                <MudRadio Option="true">Members</MudRadio>
                            </MudRadioGroup>
                        </MudItem>
                        <MudItem xs="3">
                            @if (IsSearchForMembership)
                            {
                                <MudAutocomplete T="AutocompleteCounterparty"
                                                 Label="Members"
                                                 @bind-Value="Transaction.Counterparty"
                                                 SearchFunc="SearchForMembers"
                                                 Variant="Variant.Outlined"
                                                 ToStringFunc="ac => ac?.Name"></MudAutocomplete>
                            }
                            else
                            {
                                <MudAutocomplete T="AutocompleteCounterparty"
                                                 Label="Non members"
                                                 @bind-Value="Transaction.Counterparty"
                                                 SearchFunc="SearchForNonMembers"
                                                 Variant="Variant.Outlined"
                                                 CoerceValue="true"
                                                 CoerceText="true"
                                                 Converter="@counterPartyConverter"
                                                 ToStringFunc="ac => ac?.Name"></MudAutocomplete>
                            }

                        </MudItem>

                        <MudItem xs="1">
                            @if (TransactionTypeGroup == TransactionTypeGroup.Debit)
                            {
                                <MudIcon Class="mt-4" Icon="@Icons.Filled.ArrowForward"></MudIcon>

                            }
                            else if (TransactionTypeGroup == TransactionTypeGroup.Credit)
                            {

                                <MudIcon Class="mt-4" Icon="@Icons.Filled.ArrowBack"></MudIcon>
                            }
                            else
                            {

                                <MudIcon Class="mt-4" Icon="@Icons.Filled.Block"></MudIcon>
                            }
                        </MudItem>
                        <MudItem xs="2">
                            <MudSelect Label="Select bank account" Variant="Variant.Outlined" @bind-Value="Transaction.BankAccountId">
                                @foreach (var item in _bankAccounts)
                                {
                                    <MudSelectItem Value="@item?.Id">@item?.Name</MudSelectItem>
                                }
                            </MudSelect>

                        </MudItem>
                        <MudItem xs="2">
                            @{
                                if (!_bankAccounts.Any())
                                {
                                    <MudButton Class="mt-4" @onclick="OpenAddBankAccountDialog" Variant="Variant.Filled" Color="Color.Primary">Add bank account</MudButton>
                                }
                            }
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h5">
                        Transaction
                    </MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid Justify="Justify.FlexStart">
                        <MudItem xs="12">
                            <MudTextField T="string" Label="Description" 
                                          @bind-Text="Transaction.Description" 
                                          For="(() => Transaction.Description)" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="4">
                            <MudDatePicker @ref="_picker" Label="Transaction date" @bind-Date="Transaction.ReceivedDateTime"
                                           AutoClose="true" MaxDate="DateTime.Now">
                                <PickerActions>
                                    <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Clear</MudButton>
                                </PickerActions>
                            </MudDatePicker>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h5">Amount</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        @foreach (var transactionType in Transaction.TransactionTypeAmounts)
                        {
                            <MudItem xs="6">
                                <MudNumericField T="decimal" Label="Bedrag (€)"
                                                 @bind-Value="transactionType.Amount" Min="0"></MudNumericField>
                            </MudItem>

                            <MudItem xs="6">
                            <MudSelect Label="Selecteer transactie type" Variant="Variant.Outlined" @bind-Value="transactionType.TransactionType">
                                @foreach (var item in _transactionTypes)
                                    {
                                    <MudSelectItem Value="@item">@item.GetDescription()</MudSelectItem>
                                    }
                            </MudSelect>

                        </MudItem>
                        }
                    </MudGrid>
                    <MudDivider Class="my-2"></MudDivider>
                    <MudText>Sum of all types: <strong>€@Transaction.TransactionTypeAmounts.Sum(x => x.Amount)</strong>.
                    This value should match the total amount of the transaction</MudText>
                </MudCardContent>
            </MudCard>

        </MudItem>
    <MudItem xs="12">
        <MudCard>
        <MudList Clickable="true">
            <MudListSubheader>
                Attachments
            </MudListSubheader>
            @foreach (var attachment in Transaction.TransactionAttachments)
            {
                <MudListItem Icon="@Icons.Outlined.Save" OnClick="(() => Download(attachment.FileName))">@attachment.FileName

                </MudListItem>
            }
        </MudList>
        </MudCard>
        <MudCard>
            <MudCardHeader>
                <MudText Type="Typo.h5">Attachments</MudText>
            </MudCardHeader>
            <MudCardContent>

                <InputFile id="attachmentFilePicker" OnChange="UploadFiles" hidden multiple/>

                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Filled.CloudUpload"
                           for="attachmentFilePicker">
                    Upload new attachment(s)
                </MudButton>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <ValidationSummary></ValidationSummary>
</MudGrid>

@code {

    [Parameter]
    public Models.TransactionForm Transaction { get; set; } = new();

    private bool _isSearchForMembership = false;

    [Parameter]
    public bool IsSearchForMembership
    {
        get => _isSearchForMembership;
        set
        {
            _isSearchForMembership = value;
            Transaction.Counterparty = new AutocompleteCounterparty(string.Empty, null);
        }
    }

    private TransactionTypeGroup _transactionTypeGroup;
    [Parameter]
    public TransactionTypeGroup TransactionTypeGroup {
        get => _transactionTypeGroup;
        set
        {
            _transactionTypeGroup = value;
            _transactionTypes = GetScopedTransactionTypes();
        }
    }

    [Parameter]
    public bool IsNew { get; set; }

    private IReadOnlyList<BankAccountInfo> _bankAccounts = new List<BankAccountInfo>();

    private IReadOnlyList<TransactionType> _transactionTypes = new List<TransactionType>();

    protected override async Task OnInitializedAsync()
    {
        await GetAllBankAccounts();
        _transactionTypes = GetScopedTransactionTypes();
    }

    private IReadOnlyList<TransactionType> GetScopedTransactionTypes()
    {
        if (TransactionTypeGroup == TransactionTypeGroup.Debit)
        {
            return new List<TransactionType>
            {
                TransactionType.DebitWorkshopFee,
                TransactionType.DebitDonation,
                TransactionType.DebitMemberFee,
                TransactionType.InternalBank
            }.OrderBy(x => x.GetDescription()).ToList();
        }
        return new List<TransactionType>
        {
            TransactionType.CreditAcquisitionConsumables,
            TransactionType.CreditAcquisitionGoodsAndServices,
            TransactionType.CreditBankCosts,
            TransactionType.CreditFixedCosts,
            TransactionType.InternalBank

        }.OrderBy(x => x.GetDescription()).ToList();
    }



    MudDatePicker _picker = new();

    private async Task<IEnumerable<AutocompleteCounterparty>> SearchForMembers(string searchString)
    {

        var response = await mediator.Send(new AutocompleteCounterpartyQuery(searchString, true));
        return response.Counterparties;
    }

    private async Task<IEnumerable<AutocompleteCounterparty>> SearchForNonMembers(string searchString)
    {
        var response = await mediator.Send(new AutocompleteCounterpartyQuery(searchString, false));

        return response.Counterparties;
    }


    private async Task GetAllBankAccounts()
    {
        _bankAccounts = await mediator.Send(new GetBankAccountInfos());

        if (_bankAccounts.Count == 1 && Transaction.BankAccountId == null)
        {
            Transaction.BankAccountId = _bankAccounts[0].Id;
        }
    }

    private async Task OpenAddBankAccountDialog()
    {
        var dialog = dialogService.Show<AddBankAccountDialog>("Add bank account");
        var result = await dialog.Result;
        if (!result.Cancelled && result.Data is true)
        {
            await GetAllBankAccounts();
        }
    }

    private void TransactionTypeChanged()
    {
        _transactionTypes = GetScopedTransactionTypes();
    }

    Converter<AutocompleteCounterparty> counterPartyConverter = new Converter<AutocompleteCounterparty>
    {
        SetFunc = value => value?.Name,
        GetFunc = text => new AutocompleteCounterparty(text, null)
    };

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        var entries = e.GetMultipleFiles();
        foreach (var file in entries)
        {
            var trustedFileNameForFileStorage = Path.GetRandomFileName();
            var directory = Path.Combine(Environment.ContentRootPath,
                Environment.EnvironmentName, "unsafe_uploads");
            Directory.CreateDirectory(directory);
            var path = Path.Combine(directory, trustedFileNameForFileStorage);

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream().CopyToAsync(fs);
            var transaction = new TransactionAttachment(file.Name, file.ContentType, path);
            Transaction.TransactionAttachments.Add(transaction);
        }


    }


    private async Task Download(string attachmentFileName)
    {
        var attachment = await mediator.Send(new GetAttachmentCommand(Transaction.Id, attachmentFileName));
        var fileStream = new MemoryStream(attachment.Bytes);
        using var streamRef = new DotNetStreamReference(fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", attachment.Name, streamRef); // THIS FEELS SOOOO DIRTY
    }

}