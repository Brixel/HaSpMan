@using Types
@using MediatR
@using Queries.Members
@using Queries.Members.Handlers
@inject IMediator mediator;
<MudGrid>
    <MudItem xs="12">
        <MudRadioGroup @bind-SelectedOption="TransactionTypeGroup">
            @foreach (var transactionTypeGroup in Enum.GetValues<TransactionTypeGroup>())
            {
                <MudRadio Option="transactionTypeGroup">@transactionTypeGroup</MudRadio>

            }
        </MudRadioGroup>
    </MudItem>
    <MudItem xs="12">
        <MudCard>
            <MudCardHeader>
                <MudText Typo="Typo.h4">Betrokken partijen</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid Justify="Justify.Center">
                    <MudItem xs="5">
                        <MudAutocomplete T="AutocompleteMember"
                                         Label="Members"
                                         @bind-Value="Transaction.Member"
                                         SearchFunc="SearchFunc"
                                         ToStringFunc="@(e => e == null ? null : e.Name)"></MudAutocomplete>
                    </MudItem>

                    <MudItem xs="2" >
                        @if (TransactionTypeGroup == TransactionTypeGroup.Credit)
                        {
                            <MudIcon Icon="@Icons.Filled.ArrowForward"></MudIcon>

                        }
                        else if(TransactionTypeGroup == TransactionTypeGroup.Debit)
                        {
                            
                            <MudIcon Icon="@Icons.Filled.ArrowBack"></MudIcon>
                        }
                        else
                        {
                            
                            <MudIcon Icon="@Icons.Filled.Block"></MudIcon>
                        }
                    </MudItem>
                    <MudItem xs="5">
                        <MudSelect Label="Select bank account" @bind-Value="Transaction.BankAccountId">
                            @foreach (var item in _bankAccounts)
                            {
                                <MudSelectItem Value="@item?.Id">@item</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="3">
        <MudNumericField Label="Amount" @bind-Value="Transaction.Amount" For="@(() => Transaction.Amount)" />
    </MudItem>
    <MudItem xs="12">
        <MudTextField T="string" Label="Description" @bind-value="Transaction.Description" For="(() => Transaction.Description)" />
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudDatePicker @ref="_picker" Label="Transaction date" @bind-Date="Transaction.ReceivedDateTime"
                       AutoClose="true" MaxDate="DateTime.Now">
            <PickerActions>
                <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Clear</MudButton>
            </PickerActions>
        </MudDatePicker>
    </MudItem>
    @foreach (var transactionType in Transaction.TransactionTypeAmounts)
    {
        <MudItem xs="6">
            <MudSelect Label="Select transaction type" @bind-Value="transactionType.TransactionType">
                @foreach (var item in GetScopedTransactionTypes())
                    {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
            </MudSelect>
            <MudNumericField T="decimal" Label="Amount" @bind-Value="transactionType.Amount"></MudNumericField>
        </MudItem>
    }
    <ValidationSummary></ValidationSummary>
</MudGrid>

@code {
    [Parameter]
    public Models.TransactionForm Transaction { get; set; } = new();

    [Parameter]
    public TransactionTypeGroup TransactionTypeGroup { get; set; }

    private AutocompleteMember? _selectedAutocompleteMember;

    private IReadOnlyList<BankAccountInfo> _bankAccounts = new List<BankAccountInfo>();

    protected override async Task OnInitializedAsync()
    {
        await GetAllBankAccounts();
    }

    private IReadOnlyList<TransactionType> GetScopedTransactionTypes()
    {
        if (TransactionTypeGroup == TransactionTypeGroup.Credit)
        {
            return new List<TransactionType>
            {
                TransactionType.CreditWorkshopFee,
                TransactionType.CreditDonation,
                TransactionType.CreditMemberFee,
                TransactionType.InternalBank
            };
        }
        return new List<TransactionType>
        {
            TransactionType.DebitAcquisitionConsumables,
            TransactionType.DebitAcquisitionGoodsAndServices,
            TransactionType.DebitBankCosts,
            TransactionType.DebitFixedCosts,
            TransactionType.InternalBank

        };
    }

    MudDatePicker _picker = new();

    private async Task<IEnumerable<AutocompleteMember>> SearchFunc(string searchString)
    {
        var response = await mediator.Send(new AutocompleteMembersQuery(searchString));
        return response.Members;
    }

    private async Task GetAllBankAccounts()
    {
        _bankAccounts = await mediator.Send(new GetBankAccountInfos());
        
    }
    

}