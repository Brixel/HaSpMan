@page "/transactions"
@attribute [Authorize]

@using MediatR
@using Queries.Transactions.Handlers
@using Queries.Transactions.ViewModels
@using Types

@inject IMediator _mediator


<MudTable Dense="true"
          Hover="true"
          @ref="table"
          class="mt-10"
          ServerData="@(new Func<TableState, Task<TableData<TransactionSummary>>>(ServerReload))">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Transactions</MudText>
        <MudSpacer/>
        <MudTextField Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      Class="mt-0"
                      IconSize="Size.Medium"
                      Placeholder="Search"
                      T="string"
                      ValueChanged="@(s => OnSearch(s))">
        </MudTextField>
        <MudSpacer/>
        <MudButton Class="ma-2"
                   Color="Color.Primary"
                   DisableElevation="true"
                   Link="/transactions/new"
                   Size="Size.Small"
                   Variant="Variant.Filled">
            Add transaction
        </MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="from"
                               T="TransactionSummary">
                From
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="amount"
                               T="TransactionSummary">
                Amount
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel InitialDirection="SortDirection.Descending"
                               SortLabel="receivedDateTime"
                               T="TransactionSummary">
                Received
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="description"
                               T="TransactionSummary">
                Description
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="transactionTypes"
                               T="TransactionSummary">
                Transaction types
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            Action
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="From">@context.CounterPartyName</MudTd>
        <MudTd DataLabel="Amount">€@context.Amount</MudTd>
        <MudTd DataLabel="ReceivedDateTime">@context.ReceivedDateTime.ToString("dd-MM-yyyy")</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Transaction types">
            @foreach (var type in context.TransactionTypeAmounts)
            {
                <MudChip>@type.TransactionType.GetDescription() for €@type.Amount</MudChip>
            }
        </MudTd>
        <MudTd>
            <MudTooltip Text="Edit">
                <MudIconButton aria-label="edit"
                               Icon="@Icons.Material.Filled.Edit"
                               Link="@($"/transactions/{@context.Id}/edit")">
                </MudIconButton>
            </MudTooltip>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code {
    private MudTable<TransactionSummary>? table;
    private string searchString = "";
    private bool _isBusy = false;

    private async Task<TableData<TransactionSummary>> ServerReload(TableState state)
    {
    // Workaround for https://github.com/Garderoben/MudBlazor/issues/2070
        if (_isBusy)
            return new TableData<TransactionSummary>();

        _isBusy = true;

        TransactionSummaryOrderOption orderBy = state.SortLabel switch
        {
            "from" => TransactionSummaryOrderOption.From,
            "amount" => TransactionSummaryOrderOption.Amount,
            "receivedDateTime" => TransactionSummaryOrderOption.ReceivedDateTime,
            _ => TransactionSummaryOrderOption.From
            };
        var sortDirection = (Queries.Enums.SortDirection)(int)state.SortDirection;
        var query = new GetTransactionQuery(searchString, state.Page, state.PageSize, orderBy, sortDirection);
        var data = await _mediator.Send(query);

        _isBusy = false;
        return new TableData<TransactionSummary>()
        {
            TotalItems = data.Total,
            Items = data.Items
        };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table?.ReloadServerData();
    }

}