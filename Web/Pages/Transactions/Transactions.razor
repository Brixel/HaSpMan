@page "/transactions"
@attribute [Authorize]
@using Queries.Transactions.Handlers
@using Queries.Transactions.ViewModels
@using Types
@using TransactionTypeAmount = Queries.Transactions.ViewModels.TransactionTypeAmount
@using Web.Extensions
@using System.Globalization

@inject IMediator _mediator

<MudTable Class="mt-10" Dense="true" Hover="true" @ref="table"
    ServerData="@(new Func<TableState, Task<TableData<TransactionSummary>>>(ServerReload))" RowStyleFunc="RowStyleFunc">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Transactions</MudText>
        <MudSpacer />
        <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mt-0"
            IconSize="Size.Medium" Placeholder="Search" T="string" ValueChanged="@(OnSearch)">
        </MudTextField>
        <MudSpacer />
        <MudButton Class="ma-2" Color="Color.Primary" DisableElevation="true" Href="/transactions/new" Size="Size.Small"
            Variant="Variant.Filled">
            Add transaction
        </MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="from" T="TransactionSummary">
                From
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="amount" T="TransactionSummary">
                Amount
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel InitialDirection="SortDirection.Descending" SortLabel="receivedDateTime"
                T="TransactionSummary">
                Transaction date
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="description" T="TransactionSummary">
                Description
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="transactionTypes" T="TransactionSummary">
                Transaction types
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            Action
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="From">
            @context.CounterPartyName
        </MudTd>
        <MudTd DataLabel="Amount">
            @GetAmount(context).ToString("C", CultureInfo.CreateSpecificCulture("be-NL"))
        </MudTd>
        <MudTd DataLabel="ReceivedDateTime">
            @context.ReceivedDateTime.ToString("dd-MM-yyyy")
        </MudTd>
        <MudTd DataLabel="Description">
            @context.Description
        </MudTd>
        <MudTd DataLabel="Transaction types">
            @foreach (var type in context.TransactionTypeAmounts)
            {
                <MudChip>@type.TransactionType.GetDescription() for â‚¬@type.Amount</MudChip>
            }
        </MudTd>
        <MudTd>
            @if (context.ReadOnly)
            {
                <MudTooltip Text="View">
                    <MudIconButton aria-label="view" Icon="@Icons.Material.Filled.ZoomIn"
                        Href="@($"/transactions/{@context.Id}/edit")">
                    </MudIconButton>
                </MudTooltip>
            }
            else
            {
                <MudTooltip Text="Edit">
                    <MudIconButton aria-label="edit" Icon="@Icons.Material.Filled.Edit"
                        Href="@($"/transactions/{@context.Id}/edit")">
                    </MudIconButton>
                </MudTooltip>
            }
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private MudTable<TransactionSummary>? table;
    private string searchString = "";

    private async Task<TableData<TransactionSummary>> ServerReload(TableState state)
    {
        TransactionSummaryOrderOption orderBy = state.SortLabel switch
        {
            "from" => TransactionSummaryOrderOption.From,
            "amount" => TransactionSummaryOrderOption.Amount,
            "receivedDateTime" => TransactionSummaryOrderOption.ReceivedDateTime,
            _ => TransactionSummaryOrderOption.From
        };
        var sortDirection = (Queries.Enums.SortDirection)(int)state.SortDirection;
        var query = new GetTransactionQuery(searchString, state.Page, state.PageSize, orderBy, sortDirection);
        var data = await _mediator.Send(query);

        return new TableData<TransactionSummary>()
            {
                TotalItems = data.Total,
                Items = data.Items
            };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table?.ReloadServerData();
    }

    private string RowStyleFunc(TransactionSummary transactionSummary, int index)
    {
        var transactionTypeGroup = transactionSummary.GetTransactionTypeGroup();
        return transactionTypeGroup == TransactionTypeGroup.Credit
        ? $"background-color: {Colors.Red.Lighten4}"
        : $"background-color: {Colors.Green.Lighten4}";
    }

    private decimal GetAmount(TransactionSummary transaction)
    {
        return transaction.TransactionType switch
        {
            Queries.Transactions.ViewModels.TransactionType.Credit => transaction.Amount * -1,
            _ => transaction.Amount
        };
    }
}