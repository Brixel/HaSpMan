@page "/members/{MemberId:guid}/edit"

@attribute [Authorize]

@using Commands.Handlers.Member.EditMember
@using Queries.Members.Handlers.GetMemberById
@inject IMediator _mediator
@inject IMapper _mapper
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

<h1 class="my-6">Edit member</h1>

<EditForm Model="@member" OnValidSubmit="@SubmitMember" OnInvalidSubmit="@ShowError">
    <DataAnnotationsValidator />

    <MemberForm Member="@member" />

    <MudItem Class="d-flex justify-start" xs="12">
        <MudButton ButtonType="ButtonType.Submit"
                   Class="my-8"
                   Color="Color.Primary"
                   DisableElevation="true"
                   Size="Size.Large"
                   Variant="Variant.Filled">
            Save member
        </MudButton>
    </MudItem>
</EditForm>

@code {

    [Parameter]
    public Guid MemberId { get; set; }

    public Models.MemberForm member = new();

    protected override async Task OnInitializedAsync()
    {
        var query = new GetMemberByIdQuery(MemberId);
        var memberDetail = await _mediator.Send(query);
        member = _mapper.Map<Models.MemberForm>(memberDetail);
    }

    private async Task SubmitMember()
    {
        var command = new EditMemberCommand(
            Id: MemberId,
            FirstName: member.FirstName!,
            LastName: member.LastName!,
            Address: new(
                Street: member.Street!,
                City: member.City!,
                Country: member.Country!,
                ZipCode: member.ZipCode!,
                HouseNumber: member.HouseNumber!
                ),
            Email: member.Email!,
            PhoneNumber: member.PhoneNumber!,
            MembershipFee: member.MembershipFee,
            MembershipExpiryDate: member.MembershipExpiryDate == null ? (DateTimeOffset?)null : new
                DateTimeOffset(member.MembershipExpiryDate!.Value)
            );
        var response = await _mediator.Send(command);
        Snackbar.Clear();
        Snackbar.Add($"Member {member.FirstName} {member.LastName} edited successfully!", Severity.Success);
        NavManager.NavigateTo("/members");
    }

    private void ShowError()
    {
        Snackbar.Clear();
        Snackbar.Add("Please correct all errors on the form", Severity.Error);
    }
}