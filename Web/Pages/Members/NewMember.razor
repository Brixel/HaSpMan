@page "/members/new"

@attribute [Authorize]

@using Commands.Handlers.Member.AddMember
@using Queries.Members;
@using Web.MapperProfiles;

@inject IMediator _mediator
@inject IMapper _mapper
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

<h1 class="my-6">Add new member</h1>

<EditForm Model="@_newMember" OnValidSubmit="@AddMember" OnInvalidSubmit="@ShowFormError">
    <DataAnnotationsValidator />

    <MemberForm Member="@_newMember" />

    <MudItem Class="d-flex justify-start" xs="12">
        <MudButton ButtonType="ButtonType.Submit" Class="my-8" Color="Color.Primary" DropShadow="false"
            Size="Size.Large" Variant="Variant.Filled">
            Add member
        </MudButton>
    </MudItem>
</EditForm>

@code {

    private Models.MemberForm _newMember = new()
        {
            Country = "Belgium"
        };

    private async Task AddMember()
    {
        if (await EnsureMemberIsNotDuplicate())
            return;

        var command = _mapper.Map<AddMemberCommand>(_newMember);
        var response = await _mediator.Send(command);
        Snackbar.Clear();
        Snackbar.Add($"Member {_newMember.FirstName} {_newMember.LastName} added successfully!", Severity.Success);
        NavManager.NavigateTo("/members");
    }

    private void ShowFormError()
    {
        ShowError("Please correct all errors on the form");
    }

    private void ShowError(string error)
    {
        Snackbar.Clear();
        Snackbar.Add(error, Severity.Error);
    }

    private async Task<bool> EnsureMemberIsNotDuplicate()
    {
        if (_newMember.Email is not null && await _mediator.Send(new MemberExistsByEmailQuery(_newMember.Email)))
        {
            ShowError("Member with same email already exists");
            return true;
        }

        var query = _mapper.Map<MemberExistsByNameAndAddressQuery>(_newMember,
                o => o.Items[MemberProfileItems.MemberId] = null);

        if (await _mediator.Send(query))
        {
            ShowError("Member with same name and address already exists");
            return true;
        }

        return false;
    }
}