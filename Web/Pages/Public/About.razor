@page "/about"
@using System.Security.Claims
@using System.Reflection
@using Microsoft.AspNetCore.Components.Authorization
@using System.Globalization

@inject AuthenticationStateProvider AuthenticationStateProvider

<h3 class="my-6">About</h3>

<MudText Typo="Typo.body1">Version: @_version</MudText>

<p>
    <MudButton Href="Account/Logout" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Logout"
        Color="Color.Primary">
        Logout
    </MudButton>
</p>

<h2>Claims</h2>

<p>
    @if (claims.Count() > 0)
    {
    <ul>
            @foreach (var claim in claims)
            {
            <li>@claim.Type: @claim.Value</li>
            }
    </ul>
    }
</p>

<h2>Culture info</h2>

<p>Available cultures:</p>
<select T="System.Globalization.CultureInfo" @bind="Culture" AnchorOrigin="Origin.BottomCenter">
    @foreach (var culture in _supportedCultures)
    {
        <option Value="@culture">@culture.DisplayName</option>
    }
</select>
<p>Amount test: @TestAmount.ToString("C", Culture)</p>

<p>Current UI culture: @CultureInfo.CurrentUICulture.DisplayName</p>
<p>Amount test: @TestAmount.ToString("C", CultureInfo.CurrentUICulture)</p>

@code {
    private string? authMessage;
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    private decimal TestAmount = 123.56M;
    private CultureInfo[] _supportedCultures = Array.Empty<CultureInfo>();
    private CultureInfo Culture { get; set; } = default!;

    private string _version
    {
        get
        {
            var assembly = Assembly.GetExecutingAssembly();
            var gitVersionInformationType = assembly.GetType("GitVersionInformation");
            var fullSemVerField = gitVersionInformationType?.GetField("FullSemVer");
            return fullSemVerField?.GetValue(null)?.ToString() ?? "0.0.0";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user?.Identity?.IsAuthenticated ?? false)
        {
            authMessage = $"{user.Identity.Name} is authenticated.";
            claims = user.Claims;
        }
        else
        {
            authMessage = "The user is NOT authenticated.";
        }

        _supportedCultures = CultureInfo.GetCultures(CultureTypes.AllCultures & ~CultureTypes.NeutralCultures)
        .Where(cul => !string.IsNullOrEmpty(cul.Name))
        .ToArray();

        Culture = CultureInfo.CurrentUICulture;
    }
}